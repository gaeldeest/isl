open Ctypes
open Foreign
open IslRaw_Types

(* __isl_give isl_space *isl_space_copy(__isl_keep isl_space *space); *)
let copy = foreign "isl_space_copy" (space @-> returning space)
(* __isl_null isl_space *isl_space_free(__isl_take isl_space *space); *)    
let free = foreign "isl_space_free" (space @-> returning void)

(* __isl_give isl_space *isl_space_alloc(isl_ctx *ctx, unsigned nparam, unsigned n_in, unsigned n_out); *)
let alloc = foreign "isl_space_alloc" (ctx @-> uint @-> uint @-> uint @-> returning space)
(* __isl_give isl_space *isl_space_params_alloc(isl_ctx *ctx, unsigned nparam); *)
let params_alloc = foreign "isl_space_params_alloc" (ctx @-> uint @-> returning space)
(* __isl_give isl_space *isl_space_set_alloc(isl_ctx *ctx, unsigned nparam, unsigned dim); *)        
let set_alloc = foreign "isl_space_set_alloc" (ctx @-> uint @-> uint @-> returning space)

(* unsigned isl_space_dim(__isl_keep isl_space *space, enum isl_dim_type type); *)
let dim = foreign "isl_space_dim" (space @-> dim_type @-> returning uint)

(* int isl_space_is_params(__isl_keep isl_space *space); *)
let is_params = foreign "isl_space_is_params" (space @-> returning bool)
(* int isl_space_is_set(__isl_keep isl_space *space); *)
let is_set = foreign "isl_space_is_set" (space @-> returning bool)    
(* int isl_space_is_map(__isl_keep isl_space *space); *)
let is_map = foreign "isl_space_is_map" (space @-> returning bool)

(* int isl_space_is_equal(__isl_keep isl_space *space1, __isl_keep isl_space *space2); *)
let is_equal = foreign "isl_space_is_equal" (space @-> space @-> returning bool)
(* int isl_space_is_domain(__isl_keep isl_space *space1, __isl_keep isl_space *space2); *)
let is_domain = foreign "isl_space_is_domain" (space @-> space @-> returning bool)
(* int isl_space_is_range(__isl_keep isl_space *space1, __isl_keep isl_space *space2); *)
let is_range = foreign "isl_space_is_range" (space @-> space @-> returning bool)
(* int isl_space_tuple_is_equal(__isl_keep isl_space *space1, enum isl_dim_type type1, __isl_keep isl_space *space2, enum isl_dim_type type2); *)
let tuple_is_equal = foreign "isl_space_tuple_is_equal" (space @-> dim_type @-> space @-> dim_type @-> returning bool)
    

(* __isl_give isl_space *isl_space_set_dim_id(__isl_take isl_space *space, enum isl_dim_type type, unsigned pos, __isl_take isl_id *id); *)
let set_dim_id = foreign "isl_space_set_dim_id" (space @-> dim_type @-> uint @-> id @-> returning space)
(* int isl_space_has_dim_id(__isl_keep isl_space *space, enum isl_dim_type type, unsigned pos); *)
let has_dim_id = foreign "isl_space_has_dim_id" (space @-> dim_type @-> uint @-> returning bool)
(* __isl_give isl_id *isl_space_get_dim_id(__isl_keep isl_space *space, enum isl_dim_type type, unsigned pos); *)
let get_dim_id = foreign "isl_space_get_dim_id" (space @-> dim_type @-> uint @-> returning id)
(* __isl_give isl_space *isl_space_set_dim_name(__isl_take isl_space *space, enum isl_dim_type type, unsigned pos, __isl_keep const char *name); *)
let set_dim_name = foreign "isl_space_set_dim_name" (space @-> dim_type @-> uint @-> string @-> returning space)
(* int isl_space_has_dim_name(__isl_keep isl_space *space, enum isl_dim_type type, unsigned pos); *)
let has_dim_name = foreign "isl_space_has_dim_name" (space @-> dim_type @-> uint @-> returning bool)
(* __isl_keep const char *isl_space_get_dim_name(__isl_keep isl_space *space, enum isl_dim_type type, unsigned pos); *)
let get_dim_name = foreign "isl_space_get_dim_name" (space @-> dim_type @-> uint @-> returning string_opt)

(* int isl_space_find_dim_by_id(__isl_keep isl_space *space, enum isl_dim_type type, __isl_keep isl_id *id); *)
let find_dim_by_id = foreign "isl_space_find_dim_by_id" (space @-> dim_type @-> id @-> returning int)
(* int isl_space_find_dim_by_name(__isl_keep isl_space *space, enum isl_dim_type type, const char *name); *)
let find_dim_by_name = foreign "isl_space_find_dim_by_name" (space @-> dim_type @-> string @-> returning int)

(* __isl_give isl_space *isl_space_set_tuple_id(__isl_take isl_space *space, enum isl_dim_type type, __isl_take isl_id *id); *)
let set_tuple_id = foreign "isl_space_set_tuple_id" (space @-> dim_type @-> id @-> returning space)
(* __isl_give isl_space *isl_space_reset_tuple_id(__isl_take isl_space *space, enum isl_dim_type type); *)
let reset_tuple_id = foreign "isl_space_reset_tuple_id" (space @-> dim_type @-> returning space)
(* int isl_space_has_tuple_id(__isl_keep isl_space *space, enum isl_dim_type type); *)
let has_tuple_id = foreign "isl_space_has_tuple_id" (space @-> dim_type @-> returning bool)
(* __isl_give isl_id *isl_space_get_tuple_id(__isl_keep isl_space *space, enum isl_dim_type type); *)
let get_tuple_id = foreign "isl_space_get_tuple_id" (space @-> dim_type @-> returning id)
(* __isl_give isl_space *isl_space_set_tuple_name(__isl_take isl_space *space, enum isl_dim_type type, const char *s); *)
let set_tuple_name = foreign "isl_space_set_tuple_name" (space @-> dim_type @-> string @-> returning space)
(* int isl_space_has_tuple_name(__isl_keep isl_space *space, enum isl_dim_type type); *)
let has_tuple_name = foreign "isl_space_has_tuple_name" (space @-> dim_type @-> returning bool)
(* const char *isl_space_get_tuple_name(__isl_keep isl_space *space, enum isl_dim_type type); *)
let get_tuple_name = foreign "isl_space_get_tuple_name" (space @-> dim_type @-> returning string_opt)

(* __isl_give isl_space *isl_space_domain(__isl_take isl_space *space); *)
let domain = foreign "isl_space_domain" (space @-> returning space)
(* __isl_give isl_space *isl_space_from_domain(__isl_take isl_space *space); *)
let from_domain = foreign "isl_space_from_domain" (space @-> returning space)    
(* __isl_give isl_space *isl_space_range(__isl_take isl_space *space); *)
let range = foreign "isl_space_range" (space @-> returning space)        
(* __isl_give isl_space *isl_space_from_range(__isl_take isl_space *space); *)
let from_range = foreign "isl_space_from_range" (space @-> returning space)            
(* __isl_give isl_space *isl_space_domain_map(__isl_take isl_space *space); *)
let domain_map = foreign "isl_space_domain_map" (space @-> returning space)            
(* __isl_give isl_space *isl_space_range_map(__isl_take isl_space *space); *)
let range_map = foreign "isl_space_range_map" (space @-> returning space)                
(* __isl_give isl_space *isl_space_params(__isl_take isl_space *space); *)
let params = foreign "isl_space_params" (space @-> returning space)                    
(* __isl_give isl_space *isl_space_set_from_params(__isl_take isl_space *space); *)
let set_from_params = foreign "isl_space_set_from_params" (space @-> returning space)                        
(* __isl_give isl_space *isl_space_reverse(__isl_take isl_space *space); *)
let reverse = foreign "isl_space_reverse" (space @-> returning space)                        
(* __isl_give isl_space *isl_space_join(__isl_take isl_space *left,__isl_take isl_space *right); *)
let join = foreign "isl_space_join" (space @-> space @-> returning space)
(* __isl_give isl_space *isl_space_align_params(__isl_take isl_space *space1, __isl_take isl_space *space2); *)
let align_params = foreign "isl_space_align_params" (space @-> space @-> returning space)    
(* __isl_give isl_space *isl_space_insert_dims(__isl_take isl_space *space, enum isl_dim_type type, unsigned pos, unsigned n); *)
let insert_dims = foreign "isl_space_insert_dims" (space @-> dim_type @-> uint @-> uint @-> returning space)
(* __isl_give isl_space *isl_space_add_dims(__isl_take isl_space *space, enum isl_dim_type type, unsigned n); *)
let add_dims = foreign "isl_space_add_dims" (space @-> dim_type @-> uint @-> returning space)
(* __isl_give isl_space *isl_space_drop_dims(__isl_take isl_space *space, enum isl_dim_type type, unsigned first, unsigned n); *)
let drop_dims = foreign "isl_space_drop_dims" (space @-> dim_type @-> uint @-> uint @-> returning space)
(* __isl_give isl_space *isl_space_move_dims(__isl_take isl_space *space, enum isl_dim_type dst_type, unsigned dst_pos, enum isl_dim_type src_type, unsigned src_pos, unsigned n); *)
let move_dims = foreign "isl_space_move_dims" (space @-> dim_type @-> uint @-> dim_type @-> uint @-> uint @-> returning space)
(* __isl_give isl_space *isl_space_map_from_set(__isl_take isl_space *space); *)
let map_from_set = foreign "isl_space_map_from_set" (space @-> returning space)
(* __isl_give isl_space *isl_space_map_from_domain_and_range(__isl_take isl_space *domain,__isl_take isl_space *range); *)
let map_from_domain_and_range = foreign "isl_space_map_from_domain_and_range" (space @-> space @-> returning space)
(* __isl_give isl_space *isl_space_zip(__isl_take isl_space *space); *)
let zip = foreign "isl_space_zip" (space @-> returning space)
(* __isl_give isl_space *isl_space_curry(__isl_take isl_space *space); *)
let curry = foreign "isl_space_curry" (space @-> returning space)
(* __isl_give isl_space *isl_space_uncurry(__isl_take isl_space *space); *)
let uncurry = foreign "isl_space_uncurry" (space @-> returning space)
